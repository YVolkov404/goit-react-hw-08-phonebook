{"version":3,"file":"static/js/368.a2810edb.chunk.js","mappings":"gLAGO,MAAMA,GAAmBC,EAAAA,EAAAA,IAC9B,CAACC,EAAAA,GAAgBC,EAAAA,KACjB,CAACC,EAAUC,IACTD,EAASC,QAAOC,GACdA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,kB,sPCe1C,MAAME,EAAWA,KACtB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,KAAEL,EAAI,OAAEM,IAAWC,EAAAA,EAAAA,IAAYd,EAAAA,GAC/Be,GAASC,EAAAA,EAAAA,MAEf,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,GAAG,UAAUC,SAAS,WAAWC,QAAQ,UAASC,SAAA,EAC3DC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACL,GAAIM,EAAAA,GAAiBC,GAAI,YAAaL,QAAQ,gBAAeC,UACnEC,EAAAA,EAAAA,KAACI,EAAAA,EAAa,CAACC,KAAK,UAEtBX,EAAAA,EAAAA,MAACY,EAAAA,EAAM,CACLT,SAAS,WACTU,EAAE,OACFC,EAAE,QACFC,GAAG,OACHC,EAAE,UACFC,GAAG,YACHC,aAAa,MACbC,UAAU,KAAId,SAAA,EAEdL,EAAAA,EAAAA,MAACoB,EAAAA,EAAK,CAACP,EAAE,OAAOC,EAAE,OAAMT,SAAA,EACtBC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLC,MAAMhB,EAAAA,EAAAA,KAACiB,EAAAA,IAAa,CAACZ,KAAK,YAC1BP,QAAQ,mBAEVE,EAAAA,EAAAA,KAACkB,EAAAA,EAAO,CAACpB,QAAQ,QAAQO,KAAK,MAAKN,SAAC,aAGpCC,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,CAACC,YAAa,UAAWC,YAAa,aAE9C3B,EAAAA,EAAAA,MAACY,EAAAA,EAAM,CAACC,EAAE,OAAOE,GAAG,OAAOa,MAAM,SAAQvB,SAAA,EACvCC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CAAC3B,GAAG,QAAQE,QAAQ,YAAWC,SAAC,UAG1CC,EAAAA,EAAAA,KAACwB,EAAAA,EAAK,CACJC,MAAOzC,EACP0C,YAAY,eACZrB,KAAK,KACLsB,UAAQ,EACRC,aAAc,CAAEC,MAAO,eAGzB7B,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CAAC3B,GAAG,QAAQE,QAAQ,YAAWC,SAAC,YAG1CC,EAAAA,EAAAA,KAACwB,EAAAA,EAAK,CACJC,MAAOnC,EACPoC,YAAY,eACZrB,KAAK,KACLsB,UAAQ,EACRC,aAAc,CAAEC,MAAO,kBAG3B7B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACL6B,KAAK,SACLlC,GAAIM,EAAAA,GACJC,GAAG,YACHL,QAAQ,UACRiC,QAASA,IAAM3C,GAAS4C,EAAAA,EAAAA,IAAcxC,EAAOyC,KAC7CxB,GAAG,OAAMV,SACV,uBAIHC,EAAAA,EAAAA,KAACkC,EAAAA,GAAG,CAAAnC,UACFC,EAAAA,EAAAA,KAACmC,EAAAA,EAAI,CAACvC,GAAG,OAAMG,SAAC,2BAGV,ECrFD,SAASqC,IACtB,OAAOpC,EAAAA,EAAAA,KAACb,EAAQ,GAClB,C,4CCPO,MAAMR,EAAiB0D,GAASA,EAAMxD,SAASA,SACzCD,EAAyByD,GAASA,EAAMvD,OAAOA,M","sources":["hooks/FilterHook.js","components/info/InfoPage.jsx","pages/Info.js","rdx/contacts/selectors.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts, selectFilteredContacts } from 'rdx/contacts/selectors';\n\nexport const filteredContacts = createSelector(\n  [selectContacts, selectFilteredContacts],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Link as ReactRouterLink, useParams } from 'react-router-dom';\n//----------------------------------------------\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Container,\n  Divider,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\nimport { GiBrokenSkull } from 'react-icons/all';\n//--------------------------------------------\nimport { deleteContact } from 'rdx/contacts/operations';\nimport { filteredContacts } from 'hooks/FilterHook';\n//---------------------------------------------\nexport const InfoPage = () => {\n  const dispatch = useDispatch();\n  const { name, number } = useSelector(filteredContacts);\n  const params = useParams();\n\n  return (\n    <Container as=\"section\" position=\"relative\" variant=\"primary\">\n      <Button as={ReactRouterLink} to={'/contacts'} variant=\"back-to-start\">\n        <ArrowBackIcon size=\"md\" />\n      </Button>\n      <VStack\n        position=\"relative\"\n        w=\"100%\"\n        h=\"725px\"\n        mt=\"3rem\"\n        p=\"1.75rem\"\n        bg=\"yellow.50\"\n        borderRadius=\"3xl\"\n        boxShadow=\"md\"\n      >\n        <Stack w=\"100%\" h=\"100%\">\n          <Avatar\n            icon={<GiBrokenSkull size=\"5.75rem\" />}\n            variant=\"roundedSquare\"\n          ></Avatar>\n          <Heading variant=\"extra\" size=\"3xl\">\n            Contact\n          </Heading>\n          <Divider borderColor={'red.400'} borderWidth={'0.15rem'} />\n\n          <VStack w=\"100%\" mt=\"2rem\" align=\"center\">\n            <FormLabel as=\"label\" variant=\"secondary\">\n              Name\n            </FormLabel>\n            <Input\n              value={name}\n              placeholder=\"Contact name\"\n              size=\"lg\"\n              readOnly\n              _placeholder={{ color: 'blue.400' }}\n            />\n\n            <FormLabel as=\"label\" variant=\"secondary\">\n              Number\n            </FormLabel>\n            <Input\n              value={number}\n              placeholder=\"Phone number\"\n              size=\"lg\"\n              readOnly\n              _placeholder={{ color: 'blue.400' }}\n            />\n          </VStack>\n          <Button\n            type=\"button\"\n            as={ReactRouterLink}\n            to=\"/contacts\"\n            variant=\"primary\"\n            onClick={() => dispatch(deleteContact(params.id))}\n            mt=\"3rem\"\n          >\n            Delete Contact\n          </Button>\n        </Stack>\n        <Box>\n          <Text as=\"samp\">fantom_ass 2014</Text>\n        </Box>\n      </VStack>\n    </Container>\n  );\n};\n","import * as React from 'react';\n\n//--------------------------------------------------\nimport { InfoPage } from 'components/info/InfoPage';\n\nexport default function Info() {\n  return <InfoPage />;\n}\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectFilteredContacts = state => state.filter.filter;\nexport const selectIsLoading = state => state.isLoading.isLoading;\n"],"names":["filteredContacts","createSelector","selectContacts","selectFilteredContacts","contacts","filter","contact","name","toLowerCase","includes","InfoPage","dispatch","useDispatch","number","useSelector","params","useParams","_jsxs","Container","as","position","variant","children","_jsx","Button","ReactRouterLink","to","ArrowBackIcon","size","VStack","w","h","mt","p","bg","borderRadius","boxShadow","Stack","Avatar","icon","GiBrokenSkull","Heading","Divider","borderColor","borderWidth","align","FormLabel","Input","value","placeholder","readOnly","_placeholder","color","type","onClick","deleteContact","id","Box","Text","Info","state"],"sourceRoot":""}